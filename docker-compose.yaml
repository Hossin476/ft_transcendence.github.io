services:
  frontend:
    container_name: frontend
    build:
        context: ./Frontend
        args:
          - VITE_BACKEND_URL=${BACKEND_URL}
          - VITE_URI_INTRA=${INTRA_URI_REDIRECT}
          - VITE_CRYPTO_KEY=${CRYPTO_KEY}
    networks:
      - my_network
    ports:
      - 443:443
    restart: on-failure
    depends_on:
      - backend
  db:
    container_name: postgres
    networks:
      - my_network
    image: postgres:16
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - Database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-h", "db"]
    restart: always
  backend:
    container_name: backend
    networks:
      - my_network
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - UID=${UID}
      - INTRA_SECRET=${INTRA_SECRET}
      - INTRA_URI_REDIRECT=${INTRA_URI_REDIRECT}
      - INTRA_URL=${INTRA_URL}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL}
    build: ./Backend
    volumes:
      - ./Backend:/usr/src/app
    depends_on:
      - db
      - redis
  redis:
    networks:
      - my_network
    container_name: redis
    image: redis:7
    restart: always

networks:
  my_network:
    driver: bridge

volumes:
  Database:
